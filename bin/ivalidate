#!/usr/bin/env ruby
# DATA VALIDATOR
#
# @author Nghi Pham
# @date April 2014
#
# Data validation includes:
# * Uniqueness
# * Integrity (cross reference)
# * Data type: numeric, text, enum, etc.
# * Data format: text size, text values, enum, inclusion, exclusion, etc.
# * File type: CSV
#
# Issue ruby load.rb --help for guideline/examples
#
require 'optparse'
require 'csv'
require 'active_record'
require 'rubygems'
require 'digest/sha1'

$options = {
  :unique => [],
  :not_null => [],
  :match => [],
  :not_match => [],
  :cross_reference => [],
  :query => [],
  :rquery => [],
  :consistent_by => []
}
parser = OptionParser.new("", 24) do |opts|
  opts.banner = "\nProgram: Data Validator\nAuthor: MCKI\n\n"

  opts.on("--unique FIELD", "Check if FIELD is unique") do |v|
    $options[:unique] << v
  end

  opts.on("--consistent-by F1|F2,F3,F4...", "Check if F1 is uniquely identified by the composite of [F2,F3,F4]") do |v|
    $options[:consistent_by] << v
  end

  opts.on("--not-null FIELD", "Check if FIELD is null or empty") do |v|
    $options[:not_null] << v
  end

  opts.on("--match REGEXP", "Check if FIELD matches REGEXP") do |v|
    $options[:match] << v
  end

  opts.on("--not-match REGEXP", "Check if FIELD does not match REGEXP") do |v|
    $options[:not_match] << v
  end

  opts.on("--cross-reference EXPR", "See example") do |v|
    $options[:cross_reference] << v
  end

  opts.on("--query QUERY", "Custom query (whitelist)") do |v|
    $options[:query] << v
  end

  opts.on("--rquery QUERY", "Custom query (blacklist)") do |v|
    $options[:rquery] << v
  end

  opts.on("-t", "--table TABLE", "Data table to verify") do |v|
    $options[:table] = v
  end

  opts.on("--log-to FIELD", "Field to log error to") do |v|
    $options[:log_to] = v
  end

  opts.on("--pretty", "Use more human-readable error message") do |v|
    $options[:pretty] = v
  end

  opts.on("--case-insensitive", "As its name implies ^.^") do |v|
    $options[:case_insensitive] = v
  end

  opts.on("-h", "--host HOST", "PostgreSQL host") do |v|
    $options[:host] = v
  end

  opts.on("-d", "--database DATABASE", "PostgreSQL database") do |v|
    $options[:database] = v
  end

  opts.on("-u", "--username USER", "PostgreSQL username") do |v|
    $options[:username] = v
  end

  opts.on("-p", "--password PASSWORD", "PostgreSQL password") do |v|
    $options[:password] = v
  end

  opts.on("-l", "--listen PORT", "PostgreSQL listen port (default to 5432)") do |v|
    $options[:listen] = v
  end

  opts.on("-csv", "--csv FILE", "Validate invalid lines, eg. suspicious line breakdowns") do |v|
    $options[:csv_file] = v
  end

  opts.on_tail('--help', 'Displays this help') do
    puts opts, "", help
    exit
  end
end

def help
  return <<-eos

EXAMPLES
-------------------------------------------------------
Validate `mfrs` table against several rules and write error logs to errors field:

    ivalidate -h localhost -u postgres -p postgres -d db \\
              --table=mfrs \\
              --log-to=errors \\
              --unique="mfr_lic" \\
              --unique="mfr_number" \\
              --not-null="mfr_number" \\
              --not-null="mfr_lic" \\
              --match="mfr_number/^2.*/" \\
              --match="mfr_name/^[a-zA-Z]+/" \\
              --not-match="status/(failed|inactive|wrong)/" \\
              --query="start_date <= end_date"

eos
end

begin
  parser.parse!
rescue SystemExit => ex
  exit
end

# Load parameters from ENVIRONMENT if exist
$options[:host] ||= ENV['HOST']
$options[:username] ||= ENV['USERNAME']
$options[:password] ||= ENV['PASSWORD']
$options[:listen] ||= ENV['LISTEN']
$options[:database] ||= ENV['DATABASE']

# validate parameters
if $options[:table].nil?
  puts "\nPlease specify table name: -t\n\n"
  exit
end

if $options[:log_to].nil?
  puts "\nPlease specify field to log errors: --log-to\n\n"
  exit
end

if $options[:host].nil?
  puts "\nPlease specify host name: -h\n\n"
  exit
end

if $options[:database].nil?
  puts "\nPlease specify PostgreSQL database name: -d\n\n"
  exit
end

if $options[:username].nil?
  puts "\nPlease specify PostgreSQL username: -u\n\n"
  exit
end

# Default value
$options[:listen] ||= 5432
$options[:output] ||= "/tmp/#{Digest::SHA1.hexdigest(rand(100000).to_s)}.csv"

# Database dump
ActiveRecord::Base.establish_connection(
  'adapter' => 'postgresql',
  'host' => $options[:host],
  'database' => $options[:database],
  'username' => $options[:username],
  'password' => $options[:password],
  'port' => $options[:listen],
  'timeout' => 15000
)

class String
  def not_null_sql
    a = self.split(/\s*,\s*/)
    sql = a.map{|s|
      "#{s} IS NOT NULL AND length(trim(#{s}::text)) <> 0"
    }.join(" AND ")

    "(#{sql})"
  end

  def lower
    a = self.split(/\s*,\s*/)
    sql = a.map{|s|
      "lower(#{s})"
    }.join(",")

    sql
  end
end


puts "\nValidating #{$options[:table]}"
puts "------------------------------------------"

# --------------------------------------------------------------------
# Preliminary check
# Add column errors if not yet exists
# --------------------------------------------------------------------
pre_sql = <<-eos
  DO $$
    BEGIN
      BEGIN
        ALTER TABLE #{$options[:table]} ADD COLUMN #{$options[:log_to]} text default '';
      EXCEPTION
        WHEN duplicate_column THEN RAISE NOTICE 'column #{$options[:log_to]} already exists';
      END;
    END;
  $$
eos

ActiveRecord::Base.connection.execute(pre_sql)

# --------------------------------------------------------------------
# Check unique field
# --------------------------------------------------------------------
$options[:unique].each do |field|
  begin
    puts "Checking uniqueness: #{field}"
    if $options[:case_insensitive]
      f_lower = field.lower
    else
      f_lower = field
    end
    uniq_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('[#{field}] is not unique', ' || '), ' || ')
      WHERE id IN (
        SELECT unnest(array_agg(id)) FROM #{$options[:table]} GROUP BY #{f_lower}
        HAVING count(*) > 1
      ) AND #{field.not_null_sql};
    eos

    ActiveRecord::Base.connection.execute(uniq_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# Check consitent by scope
# --------------------------------------------------------------------
$options[:consistent_by].each do |fields|
  begin
    fields = fields.split(/\s*\|\s*/)

    raise "input must be in field1|field2 format" if fields.count != 2

    f1_case = f1 = fields.first
    f2_case = f2 = fields.last

    if $options[:case_insensitive]
      f1_case = f1_case.lower
      f2_case = f2_case.lower
    end

    puts "Checking consistency: #{f1} | #{f2}"

    uniq_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('same [#{f2}] but with different [#{f1}]', ' || '), ' || ')
      WHERE id IN
      (
        SELECT unnest(array_agg(id)) FROM #{$options[:table]}
        WHERE #{f1.not_null_sql} AND #{f2.not_null_sql}
        GROUP BY #{f2_case}
        HAVING COUNT(distinct #{f1_case}) > 1
      );
    eos

    ActiveRecord::Base.connection.execute(uniq_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# Check not-null field
# --------------------------------------------------------------------
$options[:not_null].each do |field|
  begin
    puts "Checking NULL: #{field}"

    not_null_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('#{field} is null', ' || '), ' || ')
      WHERE #{field} IS NULL OR length(trim(#{field})) = 0;
    eos

    ActiveRecord::Base.connection.execute(not_null_sql)

  rescue Exception => ex
    if ex.message.include?('PG::UndefinedColumn')
      not_null_sql = <<-eos
        UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('Column `#{field}` is missing', ' || '), ' || ')
      eos
      ActiveRecord::Base.connection.execute(not_null_sql)
    else
      puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
    end
  end
end

# --------------------------------------------------------------------
# Check field satisfying --match=FIELD/REGEXP/
# --------------------------------------------------------------------
$options[:match].each do |value|
  begin
    field = value[/^[^\/]+/]
    regexp = value[/(?<=\/).*(?=\/)/]
    puts "Checking REGEXP matching: #{field} ~ #{regexp}"

    msg = $options[:pretty] ? "Invalid #{field}" : "#{field} does not match [#{regexp.gsub("'", "''")}]"

    match_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('#{msg}', ' || '), ' || ')
      WHERE #{field} IS NOT NULL AND length(trim(#{field})) <> 0 AND #{field} !~ '#{regexp}';
    eos

    ActiveRecord::Base.connection.execute(match_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# Check field satisfying --not-match=FIELD/REGEXP/
# --------------------------------------------------------------------
$options[:not_match].each do |value|
  begin
    field = value[/^[^\/]+/]
    regexp = value[/(?<=\/).*(?=\/)/]
    puts "Checking REGEXP not matching: #{regexp}"

    not_match_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('#{field} does match [#{regexp.gsub("'", "''")}]', ' || '), ' || ')
      WHERE #{field} IS NOT NULL AND length(trim(#{field})) <> 0 AND #{field} ~ '#{regexp}';
    eos

    ActiveRecord::Base.connection.execute(not_match_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# Check field satisfying --cross-reference
# --------------------------------------------------------------------
$options[:cross_reference].each do |value|
  begin
    values = value.split(/[|\.]/)

    if values.size != 3
      raise "Error: Wrong argument for --cross-reference switch"
      exit(0)
    end

    field = values[0]
    ref_table = values[1]
    ref_field = values[2]

    puts "Checking data integrity: #{value}"

    if $options[:case_insensitive]
      join_condition = "on lower(origin.#{field}) = lower(target.#{ref_field})"
    else
      join_condition = "on origin.#{field} = target.#{ref_field}"
    end

    # @todo: poor performance here, think of a better SQL!!!
    ref_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('#{field} does not reference #{values[1]}.#{values[2]}', ' || '), ' || ')
      WHERE #{field} IN (
        SELECT origin.#{field} from #{$options[:table]} origin LEFT JOIN #{ref_table} target
        #{join_condition}
        where target.#{ref_field} is null
      ) AND #{field} IS NOT NULL AND length(trim(#{field})) <> 0;
    eos

    ActiveRecord::Base.connection.execute(ref_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# Custom validation
# --------------------------------------------------------------------
$options[:query].each do |query|
  begin
    if query.split("--").count > 1
      message = query.split("--").last.strip
    else
      message = "custom-validation"
    end

    puts "Checking with custom query: #{query[0..50]}#{query.size > 51 ? "..." : "" }"

    # @todo: poor performance here, think of a better SQL!!!
    custom_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('#{message}', ' || '), ' || ')
      WHERE NOT #{query}
    eos

    ActiveRecord::Base.connection.execute(custom_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# Custom validation
# --------------------------------------------------------------------
$options[:rquery].each do |query|
  begin
    if query.split("--").count > 1
      message = query.split("--").last.strip
    else
      message = "custom-validation"
    end

    puts "Checking with custom query: #{query[0..50]}#{query.size > 51 ? "..." : "" }"

    # @todo: poor performance here, think of a better SQL!!!
    custom_sql = <<-eos
      UPDATE #{$options[:table]} SET #{$options[:log_to]} = array_to_string(string_to_array(#{$options[:log_to]}, ' || ') || string_to_array('#{message}', ' || '), ' || ')
      WHERE #{query}
    eos

    ActiveRecord::Base.connection.execute(custom_sql)
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end

# --------------------------------------------------------------------
# CSV validation
# --------------------------------------------------------------------
$options[:csv_file].each do |query|
  begin
    puts "Checking with custom query: #{query[0..50]}#{query.size > 51 ? "..." : "" }"

    TAB = %Q{\t}
    COMMA = %Q{,}
    delim = TAB
    no_seq = 0
    invalids = Array.new

    File.open($options[:csv_file]) do |f|
      header = f.first
      delim = header.include?(TAB) ? TAB : COMMA
      no_seq = CSV.parse_line(header, {:col_sep => delim}).size
      cursor = 1

      f.each_line.lazy.select{|line|
        cursor += 1
        begin
          invalids << cursor if (CSV.parse_line(line, {:col_sep => delim}).size - no_seq).abs > 3
        rescue Exception => ex
          invalids << cursor
          next
        end
      }.force
    end

    p "Lines that maybe invalid: #{invalids.join(COMMA)}" unless invalids.empty?
  rescue Exception => ex
    puts "    --> *** ERROR ***: #{ex.message.split("\n").first }"
  end
end


