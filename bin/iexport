# DATA LOADER
#
# @author Nghi Pham
# @date April 2014
#
# The script loads data from a fixed-width text file or a CSV file and fills in
# a corresponding table in the specified database
# Issue ruby load.rb --help for guideline/examples
#
require 'optparse'
require 'csv'
require 'active_record'
require 'rubygems'
require 'digest/sha1'
require 'fileutils'

SUPPORTED_INPUT_FORMATS = ['CSV']
POSTGRESQL_PORT = 5432
CSV_DEFAULT_DELIMITER = ','
CSV_ROW_SEP = "\r\n"
CSV_DEFAULT_QUOTE_CHAR = '"'

$options = {}
parser = OptionParser.new("", 24) do |opts|
  opts.banner = "\nProgram: Data Exporter\nAuthor: Nghi Pham\n\n"

  opts.on("-f", "--format FORMAT", "Output file format") do |v|
    $options[:format] = v
  end

  opts.on("--[no-]headers", "Whether or not export the header") do |v|
    $options[:headers] = v
  end
  
  opts.on("--[no-]quote-empty", "Whether or not export the header") do |v|
    $options[:quote_empty] = v
  end
  
  opts.on("--[no-]quotes", "Quote null values") do |v|
    $options[:quotes] = v
  end
  
  opts.on("--quote-char CHAR", "Quote null values") do |v|
    $options[:quote_char] = v
  end
  
  opts.on("--query QUERY", "Custom query") do |v|
    $options[:query] = v
  end

  opts.on("--delim DELIMITER", "CSV delimiter") do |v|
    $options[:delim] = v
  end
  
  opts.on("--include FIELDS", "") do |v|
    $options[:include] = v
  end
  
  opts.on("--exclude FIELDS", "") do |v|
    $options[:exclude] = v
  end

  opts.on("--linebreak CHAR", "") do |v|
    $options[:linebreak] = v
  end

  opts.on("-t", "--table TABLE", "") do |v|
    $options[:table] = v
  end

  opts.on("-s", "--select FIELDS", "") do |v|
    $options[:select] = v
  end

  opts.on("-w", "--where CONDITION", "CONDITION") do |v|
    $options[:where] = v
  end

  opts.on("-o", "--output FILE", "Output file") do |v|
    $options[:output] = v
  end

  opts.on("-h", "--host HOST", "PostgreSQL host") do |v|
    $options[:host] = v
  end

  opts.on("-d", "--database DATABASE", "PostgreSQL database") do |v|
    $options[:database] = v
  end

  opts.on("-u", "--username USER", "PostgreSQL username") do |v|
    $options[:username] = v
  end

  opts.on("-p", "--password PASSWORD", "PostgreSQL password") do |v|
    $options[:password] = v
  end

  opts.on("-l", "--listen PORT", "PostgreSQL listen port (default to 5432)") do |v|
    $options[:listen] = v
  end

  opts.on_tail('--help', 'Displays this help') do
		puts opts, "", help
    exit
	end
end

def help
  return <<-eos

EXAMPLES
-------------------------------------------------------
    
  iexport --host=localhost --username=postgres --database=db --table=items \\
          --output=/tmp/data.csv --format=csv --delim=$"\\t" --linebreak=$'\\r\\n' \\
          --select="id, name AS vendor_name, age" --where="active = 1"

eos
end

begin
  parser.parse!
rescue SystemExit => ex
  exit
end

# Load parameters from ENVIRONMENT if exist
$options[:host] ||= ENV['HOST']
$options[:username] ||= ENV['USERNAME']
$options[:password] ||= ENV['PASSWORD']
$options[:listen] ||= ENV['LISTEN']
$options[:database] ||= ENV['DATABASE']

# validate parameters
if $options[:format].nil?
  puts "\nPlease specify input file format: -f\n\n"
  exit
end

# downcase for consistency
$options[:format].upcase!

if !SUPPORTED_INPUT_FORMATS.include?($options[:format])
  puts "\nInvalid input file format, supported formats are: #{SUPPORTED_INPUT_FORMATS.join(', ')}\n\n"
  exit
end

if $options[:table].nil? && $options[:query].nil?
  puts "\nPlease specify SQL table name (-t) or a custom query (-q)\n\n"
  exit
end

if $options[:output].nil?
  puts "\nPlease specify output file: -o\n\n"
  exit
end

if $options[:host].nil?
  puts "\nPlease specify host name: -h\n\n"
  exit
end

if $options[:database].nil?
  puts "\nPlease specify PostgreSQL database name: -d\n\n"
  exit
end

if $options[:username].nil?
  puts "\nPlease specify PostgreSQL username: -u\n\n"
  exit
end

# Default value
$options[:listen] ||= POSTGRESQL_PORT
$options[:delim] ||= CSV_DEFAULT_DELIMITER
$options[:linebreak] ||= CSV_ROW_SEP
$options[:quote_char] ||= CSV_DEFAULT_QUOTE_CHAR
$options[:delim] = "\t" if $options[:delim] == '\t'
$options[:headers] ||= false
$options[:quotes] ||= false
$options[:quote_empty] ||= false
$options[:select] ||= '*'
$options[:where] ||= 'true'
$options[:include] ||= ""

# Do not quote the '"' char
# For example, normally it quotes 
#       Glove 14" length
# to 
#       "Glove 14"" length"
# The check below prevents this so when --no-quote is set, the output is not quoted
unless $options[:quotes]
  $options[:quote_char] = "\0"
end

if $options[:exclude]
  $options[:exclude] = $options[:exclude].split(/\s*,\s*/)
else
  $options[:exclude] = []
end

$options[:select] = [$options[:select].split(/\s*,\s*/) + $options[:include].split(/\s*,\s*/)].join(", ")

#$options = {host: 'localhost', database: 'db', username: 'postgres', password: 'postgres', table: 'products', listen: 5432}
ActiveRecord::Base.establish_connection(
  'adapter' => 'postgresql',
  'host' => $options[:host],
  'database' => $options[:database],
  'username' => $options[:username],
  'password' => $options[:password],
  'port' => $options[:listen],
  'timeout' => 15000
)

class Product < ActiveRecord::Base
  self.table_name = $options[:table]
end

CSV.open($options[:output], "wb", :quote_char => $options[:quote_char], :col_sep => $options[:delim], :row_sep => $options[:linebreak], :force_quotes => $options[:quotes]) do |csv|
  if $options[:query]
    scope = Product.find_by_sql($options[:query])
  else
    scope = Product.select($options[:select]).where($options[:where])
  end
  
  first = scope.first
  
  if first
    csv << first.attributes.delete_if{|k,v| k.nil? || $options[:exclude].include?(k) }.keys if $options[:headers]
  else
    # only use .column_names when table is empty, to ensure fields match values
    csv << Product.column_names if $options[:headers]
  end
  
  scope.each do |item|
    attrs = item.attributes.delete_if{|k,v| k.nil? || $options[:exclude].include?(k) }.values
    if !$options[:quote_empty]
      attrs.map!{|e| e == "" ? nil : e }
    end
    
    csv << attrs
  end
end

puts "\nFile #{$options[:output]} created!\n\n"

