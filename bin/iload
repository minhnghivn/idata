#!/usr/bin/env ruby
# DATA LOADER
#
# @author Nghi Pham
# @date April 2014
#
# The script loads data from a fixed-width text file or a CSV file and fills in
# a corresponding table in the specified database
# Issue ruby load.rb --help for guideline/examples
#

require 'idata'
require 'optparse'
require 'csv'

begin
  require 'active_record'
rescue Exception => ex
end

begin
  require 'activerecord'
rescue Exception => ex
end

require 'rubygems'
require 'digest/sha1'
require 'fileutils'

SUPPORTED_INPUT_FORMATS = ['CSV', 'FX', 'RPT']
POSTGRESQL_PORT = 5432
POSTGRESQL_USERNAME = 'postgres'
CSV_DEFAULT_DELIMITER = ','
CSV_DEFAULT_QUOTE = '"'
CSV_DEFAULT_FORMAT = 'CSV'

def error(msg)
  puts "Error: #{msg}"
  exit(-1)
end

$options = {}
parser = OptionParser.new("", 24) do |opts|
  opts.banner = "Program: iload #{Idata::VERSION}\nAuthor: Gaugau\n\nUsage: iload <client name> [option]\n       iload [options]\n"
  opts.version = Idata::VERSION

  opts.separator ""
  opts.separator "Command options:"

  opts.on("-i", "--input INPUT", "Input file") do |v|
    $options[:input] = v
  end

  opts.on("-f", "--format FORMAT", "Input file format, available values include (CSV|FX) ") do |v|
    $options[:format] = v
  end

  opts.on("--delim DELIMITER", "Field DELIMITER (for CSV format only - default to COMMA ',')") do |v|
    $options[:delim] = v
  end
  
  opts.on("--null VALUE", "Value which is considered NULL") do |v|
    $options[:null] = v
  end

  opts.on("--quote QUOTE", "Default to '\"'") do |v|
    $options[:quote] = v
  end

  opts.on("-t", "--table TABLE", "Table name to be created") do |v|
    $options[:table] = v
  end
  
  opts.on("--drop", "") do |v|
    $options[:drop] = v
  end
  
  opts.separator ""
  opts.separator "Connection options, can be ommited if <client name> is already specified:"

  opts.on("-h", "--host HOST", "PostgreSQL host") do |v|
    $options[:host] = v
  end

  opts.on("-d", "--database DATABASE", "PostgreSQL database") do |v|
    $options[:database] = v
  end

  opts.on("-u", "--username USER", "PostgreSQL username (default to postgres)") do |v|
    $options[:username] = v
  end

  opts.on("-p", "--password PASSWORD", "PostgreSQL password") do |v|
    $options[:password] = v
  end

  opts.on("-l", "--listen PORT", "PostgreSQL listen port (default to 5432)") do |v|
    $options[:listen] = v
  end
  
  opts.separator ""
  opts.separator "Common options:"

  opts.on_tail('--help', 'Displays this help') do
    puts opts, "", help
    exit
  end
	
end

def help
  return <<-eos
Example:
-------------------------------------------------------
Load data from text file and store to a table name "items"

    iload --host=localhost --username=postgres --password=postgres --database=db 
          --table=items --input=/user/items.csv

In short form, with client-name specified:

    iload maricopa --table=items --input=/user/items.csv

To use the short form, the following environment variables must be present:

    MAINDBHOST
    MAINDBUSER
    MAINDBNAME
    MAINDBPORT

Column delimiter will be auto-detected, in case you want to overwrite the default, use --delim.
For example, tell the program to use TAB as delimiter:
    
    iload maricopa --table=items --input=/user/items.csv --delim=$'\\t'

eos
end

begin
  parser.parse!
rescue SystemExit => ex
  exit 1
rescue OptionParser::MissingArgument => ex
  error ex.message
end

# extra options
$options[:client] = ARGV[0] if ARGV[0]

# cross-reference
if $options[:client] and ($options[:host] or $options[:database] or $options[:username] or $options[:password])
  error "once client name (#{$options[:client]}) is specified, -h/-u/-d/-p/-l is no longer needed"
end

# default
$options[:format].upcase! if $options[:format]
$options[:format] ||= CSV_DEFAULT_FORMAT
$options[:listen] ||= POSTGRESQL_PORT unless $options[:client]
$options[:username] ||= POSTGRESQL_USERNAME unless $options[:client]
$options[:quote] ||= CSV_DEFAULT_QUOTE
$options[:drop] ||= false

# validate parameters
if $options[:input].nil?
  error "please specify input file: -i"
end

if File.exists?($options[:input]) && File.directory?($options[:input])
  error "`#{$options[:input]}` is a directory! input must be a file"
end

unless File.exists?($options[:input])
  error "file `#{$options[:input]}` not found!"
end

# auto detect delimiter
$options[:delim] ||= Idata::Detector::new($options[:input]).find

if !SUPPORTED_INPUT_FORMATS.include?($options[:format])
  error "invalid input file format, supported formats are: #{SUPPORTED_INPUT_FORMATS.join(', ')}"
end

if $options[:table].nil?
  error "Please specify table name: -t"
end

if ARGV.count > 1
  error "too many arguments!"
end

if $options[:client]
  if ENV['MAINDBNAME'].blank?
    error "the environment variable MAINDBNAME is not present"
  end
  
  if ENV['MAINDBHOST'].blank?
    error "the environment variable MAINDBHOST is not present"
  end
  
  ActiveRecord::Base.establish_connection(
    'adapter' => 'postgresql',
    'host' => ENV['MAINDBHOST'],
    'database' => ENV['MAINDBNAME'],
    'username' => ENV['MAINDBUSER'] || POSTGRESQL_USERNAME,
    'port' => ENV['MAINDBPORT'] || POSTGRESQL_PORT,
    'timeout' => 15000
  )
  
  class Organization < ActiveRecord::Base
  end
  
  client = Organization.where("name ilike ? AND name NOT ilike 'MSSS'", $options[:client]).first
  unless client
    error "cannot find client with such name: `#{$options[:client]}`"
  else
    Organization.establish_connection(
      'adapter' => 'postgresql',
      'host' => client.db_ipaddress,
      'database' => client.db_name,
      'username' => client.db_username,
      'port' => client.db_port,
      'timeout' => 15000
    )
    
    $options[:database] = client.db_name
    $options[:username] = client.db_username
    $options[:host] = client.db_ipaddress
    $options[:listen] = client.db_port
  end
else
  if $options[:host].nil?
    error "please specify host name: -h"
  end

  if $options[:database].nil?
    error "please specify database name: -d"
  end

  if $options[:username].nil?
    error "please specify username: -u"
  end

  # Database dump
  ActiveRecord::Base.establish_connection(
    'adapter' => 'postgresql',
    'host' => $options[:host],
    'database' => $options[:database],
    'username' => $options[:username],
    'password' => $options[:password],
    'port' => $options[:listen],
    'timeout' => 15000
  )
end

$tmpfile = "/tmp/#{Digest::SHA1.hexdigest(rand(100000).to_s)}.csv"
$csv_converters = [:stripper]

CSV::Converters[:stripper] = lambda{ |s|
  if s.is_a?(String)
    r = s.strip
    return nil if r == ""
    return r
  else
    return s
  end
}

$csv_converters << :null_converter if $options[:null]

CSV::Converters[:null_converter] = lambda{ |s|
  return nil if s == $options[:null]
  return s
}

class String
  def underscore
    return self if self.nil?
    return self.strip.gsub(/[^a-z0-9]+/, "_")
  end
end

class MyParser
  def initialize
  end

  def run  
    load_fx if $options[:format] == 'FX' || $options[:format] == 'RPT'
    load_csv if $options[:format] == 'CSV'
  end

  def load_csv
    # Load CSV data from input file to a temp array    
    csv_data = []
    CSV.foreach($options[:input], :col_sep => $options[:delim], :quote_char => $options[:quote], :converters => $csv_converters) do |csv|
      csv_data << csv
    end
    
    # Serialize array into a new CSV (with standard delimiter, quote) for later use with PostgreSQL
    CSV.open($tmpfile, "wb", :col_sep => CSV_DEFAULT_DELIMITER, :quote_char => CSV_DEFAULT_QUOTE) do |writer|
      csv_data.each do |csv|
        writer << csv unless csv.empty? # performance caveat here
      end
    end
    
    # Send to PostgreSQL
    create_table_from_csv($tmpfile)
  end

  def load_fx
    # Load data
    data = IO.read($options[:input]).split("\n")
    header = data.shift
    headers = header.scan(/[^\s]+\s+/)

    # Parse
    ranges = headers.map{|s| "a#{s.size}"}.join("")
    headers.map!{|s| s.downcase.strip }

    # Write
    CSV.open($tmpfile, "wb", :col_sep => CSV_DEFAULT_DELIMITER, :quote_char => CSV_DEFAULT_QUOTE) do |csv|
      csv << headers
      data.each_with_index{|s, index|
        record = s.unpack(ranges).map{|e| e.strip}
        
        # take advantage of CSV converters
        $csv_converters.each {|converter|
          converter_lambda = CSV::Converters[converter]
          record.map!(&converter_lambda)
        }
        
        csv << record
      }
    end
    
    # Send to PostgreSQL
    create_table_from_csv($tmpfile)
  end

  def create_table_from_csv(csv_path)
    # Get headers
    csv = CSV.open(csv_path, :headers => true, :col_sep => CSV_DEFAULT_DELIMITER, :quote_char => CSV_DEFAULT_QUOTE)
    
    first = csv.first
    unless first
      raise "File Empty!!!"
    end
    
    # sanitize
    headers = first.headers
    headers.each_with_index {|e, index|
      if e.nil? or e.empty?
        headers[index] = "column_#{index + 1}"
      end
    }
    headers.map!{|e| e.downcase.underscore }
    
    # check if every field name is unique
    if headers.count != headers.uniq.count
      error "duplicate field name [#{headers.sort.join(', ')}]"
    end

    # Create table
    if $options[:drop]
      drop_table_sql = "drop table if exists #{$options[:table]};"
    else
      drop_table_sql = ""
    end

    create_table_sql = headers.map{|e| "\"#{e}\" text"}.join(",")
    if headers.include? 'id'
      create_table_sql = "create table if not exists #{$options[:table]}( #{create_table_sql} );"
    else
      create_table_sql = "create table if not exists #{$options[:table]}( id serial not null, #{create_table_sql} );"
    end
    query(drop_table_sql, create_table_sql)
    
    insert_data_sql = headers.map{|e| "\"#{e}\""}.join(",")
    insert_data_sql = "COPY #{$options[:table]}( #{insert_data_sql} ) FROM '#{csv_path}' DELIMITER ',' CSV HEADER"
    insert_data_sql = "PGPASSWORD=#{$options[:password]} psql -U #{$options[:username]} -h #{$options[:host]} -p #{$options[:listen]} #{$options[:database]} -c \"\\#{insert_data_sql}\""
    
    # Change output file permission so that postgres user can read it
    begin
      FileUtils.chmod 0755, csv_path
    rescue Exception => ex
      error "cannot change file permission"
    end
    
    # Execute    
    `#{insert_data_sql} > /dev/null`
    
    # Clean up
    File.delete(csv_path) if File.exists?(csv_path)
      
    if $?.exitstatus == 0 
      puts "Table `#{$options[:table]}` loaded\n"
    else
      puts "Something went wrong!"
    end
  end

  private
  def query(*query_str)
    if $options[:client]
      Organization.connection.execute(query_str.join("; "))
    else
      ActiveRecord::Base.connection.execute(query_str.join("; "))
    end
  end
end

# Run!
e = MyParser.new
e.run

